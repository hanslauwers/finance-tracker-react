continue
next
friendship
next
user
next
continue
user
friendship
next
friendship
next
continue
exception
next
user.friendships
next
params[:user_email]
continue
user_json
user_json.delete("updated_at")
user_json.remove("updated_at")
user_json.keys.remove("updated_at")
user_json.keys
user_json
user_json.email
user_json[:friends_with_current]
user_json["friends_with_current"]
user_json
user_json["friends_with_current"] = true
user_json[friends_with_current] = true
user_json
user_json[:friends_with_current] = true
user_json = user.as_json
user
user.as_json[:not_friends_with_current] = true
user.as_json
user
user.not_friends_with_current = true
user[:not_friends_with_current] = true
user.not_friends_with?(current_user)
user
continue
users
continue
users
continue
a == stock.price
a = stock.last_price.to_f
a = BigDecimal.new(stock.price)
stock.price.class
stock.last_price.class
exit
next
stock.price
stock.last_price
stock.last_price == stock.price
@user_stocks
next
stock.price
stock.last_price
stock
exit
@user_stocks
next
@user_stocks
exit
exception
next
continue
steps
next
step up
next up
step out
next
nest
next
step
next
@user_stock
next
Stock.find(2)
params[:stock_id]
next
continue
exception
next
user
next
continue
Stock.new_from_lookup("G")
Stock.new_from_lookup("GM")
@stock
next
params[:stock]
continue
exit
continue
next
params[:id]
params
exit
next
stock
next
stock
next
params
exit
User.find(params[:current_user_id])
params
exit
@current_user
current_user
exit
date_time.class
date_time
exit
DateTime.parse("2017-10-11 15:05:00")
DateTime
DateTime.parse(date_time)
date_time
continue
@user
continue
n
d
continue
n
continue
where("lower(#{fieldname}) like ?", "%#{param}%")
fieldname
continue
fieldname
continue
param
fieldname
continue
n
user_stocks.where(stock_id: stock.id).exists?
n
stock
n
continue
n
user_stocks
continue
n
continue
n
@stock
n
@stock
n
@stock
