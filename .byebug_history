continue
result["auth-token"]
next
token
next
exit
request.headers.methods
request.headers
request.headers.keys
response.headers.keys
response.headers.methods
response.methods
response
resource
response.headers
response
request.headers
request.headers['Authorization']
continue
UserStock.where(user_id:2).pluck(:stock_id)
UserStock.where(user_id:2)
UserStock.find_by(user_id:2)
@user_stock
next
@user_stock
next
user
next
params
continue
request.headers['Authorization']
authenticate_user_from_token!
current_user
continue
current_user
next
response_body
next
conext
continue
@current_user
current_user
continue
User.find(result[0]["sub"])
result[0]["sub"]
result[0]
result
result["sub"]
result = JWT.decode(jwt_token,ENV.fetch("DEVISE_JWT_SECRET_KEY"))
User.find(2)
JWT.decode(jwt_token,ENV.fetch("DEVISE_JWT_SECRET_KEY"))
ENV.fetch("DEVISE_JWT_SECRET_KEY")
Env.fetch("DEVISE_JWT_SECRET_KEY")
JWT.methods
JWT::JsonWebToken
JWT.decode(jwt_token)
JWT
continue
Devise.methods
Devise.inspect
Devise
Devise::JsonWebToken
JsonWebToken
next
jwt_token
next
request.headers["Authorization"]
request
continue
result
result["token"] = token
result = resource.as_json
resource["token"] = token
token
resource[:token] = token
resource
exit
request.headers["warden-jwt_auth.token"]
request.headers["warden-jwt_auth_token"]
request.headers["warden_jwt_auth_token"]
request.headers
request.header
request
params
continue
params
exit
params
exit
JSON.parse(response.body)["error"]
JSON.parse(response.body).error
JSON.parse(response.body)
response.body.as_json
response.body
response.status
response
json
exit
continue
next
continue
next
exit
response.body
JSON::Validator.validate!(schema_path, response.body, strict: true)
exit
continue
next
continue
resource
next
continue
sign_up_params
sign_up_prams
exit
sign_up_params
resource
params
sign_up_params
exit
JSON::Validator.validate!(schema_path, response.body, strict: true)
exit
schema_path
JSON::Validator.validate!(schema_path, response.body, strict: true)
response.body
continue
quit
continue
resource.as_json
resource.to_json
resource
exit
resource.as_json
JSON.parse(resource)
resource
continue
response.body
continue
next
exit
JSON.parse(response.body)
exit
String.decode(response.body)
String.encode(response.body)
response.body
response.body.replace("\"","'")
response.body.replaceAll("\"","'")
response.body.as_json
response.body.to_json
response.body
response
response.body
response.body.as_json.email
response.body.as_json
response.body["ema"]
response.body["email"]
response.body[:email]
response.body["email"]
response.body.email
response.body
continue
exit
sign_up_params
params
continue
step
step into 44
step into
response
url
next
:user
:params
params
url
exit
response
resource
exit
response
response.status
response.header
response
exit
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNTM2MzY5MDU2LCJleHAiOjE1MzY0NTU0NTYsImp0aSI6ImU4MWY0NWRmLTRhYzctNDQxNC05NWIzLWFkMmVhMGIwYjZhNCJ9.PHCwGN0oLHwlH0_AUnsrKJsVqbvLi1Kw03ZeYCuMFUk", ENV.fetch("DEVISE_JWT_SECRET_KEY"))
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNTM2MzY5MDU2LCJleHAiOjE1MzY0NTU0NTYsImp0aSI6ImU4MWY0NWRmLTRhYzctNDQxNC05NWIzLWFkMmVhMGIwYjZhNCJ9.PHCwGN0oLHwlH0_AUnsrKJsVqbvLi1Kw03ZeYCuMFUk")
JWT.decode(response.header["Authorization"])
response.header["Authorization"]
response
b = response.header["Authorization"]
b = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNTM2MzY4NTEyLCJleHAiOjE1MzY0NTQ5MTIsImp0aSI6IjNmMTQzYjhjLTFkMzUtNDEyMC1hOGNlLTcyMDE4NzU1ZGI0ZSJ9.vkCnG0rDDXauhv3LLaQTG527kwlM_is3sZ2fn9ggRnU
JWT.decode(a)
a
a = response.header["Authorization"]
response.header["Authorization"]
h = response.header["Authorization"]
response.header["Authorization"]
response.header
response.header.Authorization
response.header.authorization
response.header
response.Headers
response
continue
next
friendship
next
user
next
continue
user
friendship
next
friendship
next
continue
exception
next
user.friendships
next
params[:user_email]
continue
user_json
user_json.delete("updated_at")
user_json.remove("updated_at")
user_json.keys.remove("updated_at")
user_json.keys
user_json
user_json.email
user_json[:friends_with_current]
user_json["friends_with_current"]
user_json
user_json["friends_with_current"] = true
user_json[friends_with_current] = true
user_json
user_json[:friends_with_current] = true
user_json = user.as_json
user
user.as_json[:not_friends_with_current] = true
user.as_json
user
user.not_friends_with_current = true
user[:not_friends_with_current] = true
user.not_friends_with?(current_user)
user
continue
users
continue
users
continue
a == stock.price
a = stock.last_price.to_f
a = BigDecimal.new(stock.price)
stock.price.class
stock.last_price.class
exit
